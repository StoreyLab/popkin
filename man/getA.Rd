% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getA.R
\name{getA}
\alias{getA}
\title{Compute A matrix from genotypes}
\usage{
getA(X, n = NA, m = NA, lociOnCols = FALSE, lowMem = FALSE)
}
\arguments{
\item{X}{Genotype matrix, BEDMatrix object, or a function that returns the genotypes of all individuals at successive loci each time it is called, and NULL when no loci are left.}

\item{n}{Number of individuals (required only when X is a function, ignored otherwise)}

\item{m}{Number of loci (optional, may truncate input when X is a function; ignored when X is a matrix or BEDMatrix object)}

\item{lociOnCols}{If true, X has loci on columns and individuals on rows; if false, loci are on rows and individuals on columns. Has no effect if X is a function.  If X is a BEDMatrix object, lociOnCols=TRUE is set automatically.}

\item{lowMem}{If true, code that runs through each SNP is used, which uses very low memory but is slower. If false, code that uses matrix algebra is used, which uses much more memory but is also faster.  Set to TRUE automaticaly when X is a function.}
}
\value{
The A matrix.
}
\description{
Given the biallelic genotypes of \eqn{n} individuals, this function returns the \eqn{n}-by-\eqn{n} matrix \eqn{A} that satisfies
\deqn{E[A] = M(\Phi - 1),}
where \eqn{\Phi} is the kinship matrix and \eqn{M} is a nuisance scaling factor (determined by the unknown ancestral allele frequencies of each locus).
Thus a \eqn{\Phi} estimate can be recovered from \eqn{A} after a separate step that estimates \eqn{M = -\min E[A]}{M = -min E[A]} (see \code{\link{getAEminSubpops}} for one example).
}
\details{
The matrix X (or the vectors returned by the function X) must have values only in c(0,1,2,NA), encoded to count the number of reference alleles at the locus, or NA for missing data.
}
\examples{
\dontrun{
## This example assumes input is in BED format and is loaded using BEDMatrix
## "file" is path to BED file (excluding .bed extension)
library(BEDMatrix)
X <- BEDMatrix(file) # load genotype matrix object
A <- getA(X) # calculate A from genotypes
}

}
