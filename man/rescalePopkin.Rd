% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rescalePopkin.R
\name{rescalePopkin}
\alias{rescalePopkin}
\title{Rescale kinship matrix to set a given kinship value to zero.}
\usage{
rescalePopkin(Phi, subpops, phiMin)
}
\arguments{
\item{Phi}{An \eqn{n \times n} kinship matrix.}

\item{subpops}{The length-\eqn{n} vector of subpopulation assignments for each individual.}

\item{phiMin}{A scalar kinship value to define the new zero kinship.}
}
\value{
The rescaled \eqn{n \times n} kinship matrix, with the desired level of relatedness set to zero.
}
\description{
Rescales the input kinship matrix \eqn{\Phi} so that the value \eqn{\phi_{min}} in the original kinship matrix becomes zero, using the formula
\deqn{\Phi' = \frac{\Phi - \phi_{min}}{1 - \phi_{min}}.}
If subpopulation labels 'subpops' are provided, they are used to estimate \eqn{\phi_{min}} using \code{\link{minAvgSubpops}} internally.
If both subpops and phiMin are provided, script stops with a fatal error.
}
\examples{
\dontrun{
## suppose first we estimate the kinship matrix without subpopulations, which is more likely to be biased
## This example assumes input is in BED format and is loaded using BEDMatrix
## "file" is path to BED file (excluding .bed extension)
library(BEDMatrix)
X <- BEDMatrix(file) # load genotype matrix object
Phi <- popkin(X) # calculate kinship from genotypes, WITHOUT subpopulation labels "subpops"
## then we visualize this matrix, figure out a reasonable subpopulation partition "subpops"

Phi <- rescalePopkin(Phi, subpops) # direct way, recommended

phiMin <- minAvgSubpops(Phi, subpops) # or first re-estimate the minimum kinship
Phi <- rescalePopkin(Phi, phiMin=phiMin) # then set that level of relatedness to zero!
}

}
